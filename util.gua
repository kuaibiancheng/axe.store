con importPath = import('path')
con importConfig = import('config')
con readFile = function(path_file) {
    var c = 'cat "{}"'.format(path_file)
    var result = call(c)
    return result
}
con guaListGetReverse = function(list, i) {
    var l = list.length()
    var index = l + i
    var e = list[index]
    return e
}
con guaListIn = function(list, e) {
    for (var i = 0; i < list.length(); i += 1) {
        con l = list[i]
        if (l == e) {
            return true
        }
    }
    return false
}
con guaListSortByKey = function(list, key, reverse=false) {
    con newList = []
    for (var i = 0; i < list.length(); i += 1) {
        con v = list[i]
        newList.add(v)
    }
    con n = newList.length()
    for (var i = 1; i < n; i += 1) {
        con v = newList[i]
        con valueOfKey = v[key]
        var j = i
        if (reverse) {
            while (i > 0 and newList[i-1][key] < valueOfKey) {
                newList[i] = newList[i-1]
                i -= 1
            }
        } else {
            while (i > 0 and newList[i-1][key] > valueOfKey) {
                newList[i] = newList[i-1]
                i -= 1
            }
        }
        newList[i] = v
    }
    return newList
}
con guaStringIn = function(str, subStr) {
    var index = str.find(subStr)
    return index != -1
}
con guaStringToInt = function(str) {
    con s = str
    var i = 0
    var n = 0
    while (i < s.length()) {
        var integer = '0123456789'.find(s[i])
        if (integer < 0) {
            return null
        }
        n = n * 10 + integer
        i += 1
    }
    return n
}
con guaStringMultiply = function(str, num) {
    var newStr = ''
    for (var i = 0; i < num; i += 1) {
        newStr += str
    }
    return newStr
}
con guaStringLower = function(str) {
    var alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    var newStr = ''
    var i = 0
    var l = str.length()
    while (i < l) {
        var char = str[i]
        var index = alpha.find(char)
        if (index != -1) {
            if (index >= 26) {
                var lowerIndex = index - 26
                newStr += alpha[lowerIndex]
            } else {
                newStr += char
            }
        } else {
            newStr += char
        }
        i += 1
    }
    return newStr
}
con guaStringFindReverse = function(str, subStr) {
    var index = 0
    var skipedLen = 0
    var found = false
    while (true) {
        str = str.cut(index)
        var newIndex = str.find(subStr)
        if (newIndex != -1) {
            found = true
            index = newIndex + 1
            skipedLen += index
        } else {
            break
        }
    }
    if (found) {
        return skipedLen - 1
    } else {
        return -1
    }
}
con guaStringStrip = function(str) {
    var i = 0
    var l = str.length()
    var start = 0
    while (i < l) {
        var char = str[i]
        if (char != ' ') {
            break
        } else {
            i += 1
            start = i
        }
    }
    l = str.length()
    var end = l
    while (l > 1) {
        var char = str[l-1]
        if (char != ' ') {
            break
        } else {
            l -= 1
            end = l
        }
    }
    if (end <= start) {
        return ''
    } else {
        var striped = str.cut(start, end)
        return striped
    }
}
con guaStringEndwith = function(str, subStr) {
    var l1 = str.length()
    var l2 = subStr.length()
    var start = l1 - l2
    var end = l1
    var s = str.cut(start, end)
    var e = s == subStr
    return e
}
con guaStringStartwith = function(str, subStr) {
    var l1 = str.length()
    var l2 = subStr.length()
    var start = 0
    var end = l2
    var s = str.cut(start, end)
    var e = s == subStr
    return e
}
con guaStringMatchScore = function(searchedStr, originalStr) {
    con l1 = searchedStr.lower()
    con l2 = originalStr.lower()
    if (searchedStr == originalStr) {
        return 100
    } else if (l1 == l2) {
        return 90
    } else if (originalStr.has(searchedStr)) {
        return 80
    } else if (l2.has(l1)) {
        return 70
    } else {
        return 0
    }
}
con guaStringJoin = function(s, list) {
    con l = list.length()
    if (l == 0) {
        return ''
    } else {
        var i = 1
        var str = list[0]
        while (i < l) {
            con e = list[i]
            con f = '{}{}'.format(s, e)
            str += f
            i += 1
        }
        return str
    }   
}
con guaFilesInDirectory = function(path, needDirectory=true, needFile=true) {
    var c = 'ls "{}"'.format(path)
    var r = call(c)
    if (r == null or r == '') {
        return []
    }
    var lines = r.split('\n')
    var i = 0
    var l = lines.length()
    var files = []
    while (i < l) {
        var line = lines[i]
        var stripedLine = guaStringStrip(line)
        if (stripedLine != '') {
            var absPath = '{}/{}'.format(path, line)
            if (needDirectory) {
                if (guaFileIsDirectory(absPath)) {
                    files.add(absPath)
                }
            }
            if (needFile) {
                if (not guaFileIsDirectory(absPath)) {
                    files.add(absPath)
                }
            }
        }
        i += 1
    }
    return files
}
con guaFileType = function(filePath) {
    var c = 'file "{}"'.format(filePath)
    var r = call(c)
    r = r.cut(filePath.length())
    return r
}
con guaFileSha256 = function(path) {
    con c = 'shasum -a 256 "{}"'.format(path)
    con r = call(c)
    con _sha256 = r.strip(' ').split(' ')[0]
    return _sha256
}
con guaFilePermissionWriteAdd = function(path) {
    con c = 'chmod -R +w {}'.format(path)
    return call(c)
}
con guaFileIsDirectory = function(path) {
    var typeStr = guaFileType(path)
    var d = 'directory\n'
    var i = guaStringEndwith(typeStr, d)
    return i
}
con guaFileIsScript = function(path) {
    con r = guaFileType(path)
    con scriptStr = 'script'
    con i = r.has(scriptStr)
    return i
}
con guaFileIsExecutable = function(path) {
    if (guaFileIsDirectory(path)) {
        return false
    }
    con c = 'find "{}" -perm +111'.format(path)
    con r = call(c)
    if (r == null) {
        return false
    } else {
        if (r == '') {
            return false
        } else {
            return true
        }
    }
}
con guaFileExist = function(path, isDirectory=false) {
    if (isDirectory) {
        return guaFileIsDirectory(path)
    } else {
        con typeStr = guaFileType(path)
        con d = '(No such file or directory)\n'
        con notExist = typeStr.endswith(d)
        con exist = not notExist
        return exist
    }
}
con guaFileDirectoriesByName = function(basePath, directoryName) {
    con c = 'find {} -type d -name "{}"'.format(basePath, directoryName)
    con r = call(c)
    if (r == null or r == '') {
        return []
    } else {
        con newR = r.strip('\n')
        con dirs = newR.split('\n')
        return dirs
    }
}
con guaFindSuffixInDirectory = function(basePath, suffix) {
    con c = 'find {} -name "*{}"'.format(basePath, suffix)
    con r = call(c)
    if (r == null or r == '') {
        return []
    } else {
        con newR = r.strip('\n')
        con dirs = newR.split('\n')
        return dirs
    }
}
con guaFileAllExeInDirectory = function(path) {
    con c = 'find "{}" -type f -perm +111'.format(path)
    con r = call(c)
    if (r == null or r == '') {
        return []
    } else {
        con newR = r.strip('\n')
        con files = newR.split('\n')
        con newFiles = []
        for (var i = 0; i < files.length(); i += 1) {
            con file = files[i]
            if (file.endswith('dll') or file.endswith('exe')) {
                continue
            }
            newFiles.add(file)
        }
        return newFiles
    }
}
con guaFileMkdir = function(path) {
    con e = guaFileExist(path)
    if (not e) {
        con c = 'mkdir -p "{}"'.format(path)
        return callWithoutOutput(c)
    } else {
        return true
    }
}
con guaFileCp = function(source, dest) {
    var c = 'cp -r "{}" "{}"'.format(source, dest)
    var r = callWithoutOutput(c)
    return r
}
con guaFileMv = function(source, dest) {
    var c = 'mv "{}" "{}"'.format(source, dest)
    var r = callWithoutOutput(c)
    return r
}
con guaFileRm = function(source) {
    con c = 'rm -rf "{}"'.format(source)
    var r = callWithoutOutput(c)
    return r
}
con guaFileSymbolicLink = function(source, dest, needLog=false) {
    con c = 'ln -sf "{}" "{}"'.format(source, dest)
    if (needLog) {
        log(c)
    }
    con r = callWithoutOutput(c)
    return r
}
con guaCharIsAlpha = function(char) {
    var alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    var _in = guaStringIn(alpha, char)
    return _in
}
con guaArrayHas = function(array, element) {
    for (var i = 0; i < array.length(); i+=1) {
        con e = array[i]
        if (e == element) {
            return true
        }
    }
    return false
}
con guaUuid = function() {
    con c = 'uuidgen'
    var result = os.exec(c)
    result = result.output
    result = result.cut(0, result.length() - 1)
    return result
}
con guaJsonFromFile = function(file) {
    var s = stringFromFile(file)
    var j = json.loads(s)
    return j
}
con guaTimestamp = function() {
    con c = 'date +%s'
    var _t = call(c)
    _t = _t.cut(0, _t.length() - 1)
    con t = guaStringToInt(_t)
    return t
}
con _generatedUuid = guaUuid()
con call = function(c) {
    con fileName = '.gualang_{}.output'.format(_generatedUuid)
    var outputTmpFile = '/usr/local/axe/meta/{}'.format(fileName)
    var newCommand = '{} > {}'.format(c, outputTmpFile)
    var result = os.system(newCommand)
    if (result == 0) {
        var r = stringFromFile(outputTmpFile)
        return r
    } else {
        con s = 'call failed <{}>'.format(c)
        wirteLogFile(s)
    }
}
con callWithoutOutput = function(c) {
    var result = os.system(c)
    if (result == 0) {
        return true
    } else {        
        con s = 'call failed <{}>'.format(c)
        wirteLogFile(s)  
    }
}
con cleanTmpFiles = function() {
    var needClean = false
    con timestampFile = '/usr/local/axe/meta/{}'.format('.clean.timestamp')
    con now = guaTimestamp()
    if (guaFileExist(timestampFile)) {
        con valueStr = stringFromFile(timestampFile)
        con value = guaStringToInt(valueStr)
        con diff = now - value
        if (diff > 3600) {
            needClean = true
        } else {
            needClean = false
        }
    } else {
        needClean = true
    }
    if (needClean) {
        con pattern = '.gualang*'
        var outputTmpFiles = '/usr/local/axe/meta/{}'.format(pattern)
        con c = 'rm -rf {}'.format(outputTmpFiles)
        callWithoutOutput(c)
        con nowStr = '{}'.format(now)
        nowStr.writeToFile(timestampFile)
    }
}
con ensure = function(condition, message) {
    if (not condition) {
        log('*** 测试失败:', message)
    }
}
con input = function() {
    var str = os.exec('read input && echo $input').output.split('\n')[0]
    return str.strip('')
}
con isArray = function(o) {
    return type(o) == type([])
}
con outputForJson = function(action, status, data, message="") {
    return {
        action: action,
        status: status,
        data: data,
        message: message,
    }
}
con time = function() {
    con d = os.date()
    con t = '[{}-{}-{} {}:{}:{}]'.format(d.year, d.month, d.day, d.hour, d.min, d.sec)
    return t
}
con username = function () {
    con cuser = 'whoami'
    var user = call(cuser)
    user = user.cut(0, user.length() - 1)
    return user
}
con wirteLogFile = function (message) {
    con u = username()
    con suffix = '/Users/{}/Library/Logs/Store/'.format(u)
    guaFileMkdir(suffix)
    con path = "{}/gua.log".format(suffix)
    con t = time()
    con s = '{} {}\n'.format(t, message)
    s.appendToFile(path)
}
con loadInstalled = function() {
    con p = importPath.pathInstalledList()
    if (not guaFileExist(p)) {
        '{}'.writeToFile(p)
        return {}
    }
    var s = stringFromFile(p)
    return json.loads(s)
}
con addInstalled = function(token) {
    var o = loadInstalled()
    o[token] = 1
    con p = importPath.pathInstalledList()
    var s = json.dumps(o)
    s.writeToFile(p)
}
con removeInstalled = function(token) {
    var o = loadInstalled()
    o.delete(token)
    con p = importPath.pathInstalledList()
    var s = json.dumps(o)
    s.writeToFile(p)
}
con jq = function(jsonString) {
    os.system("echo '{}' | jq".format(jsonString))
}
con guaSearchFromDb = function(table, name) {
    var pathDir = importPath.pathMetaBin()
    var pathDb = '{}/package_source_data/{}'.format(pathDir, 'store.db')
    var cmd = `sqlite3 {} 'select * from {} where (name LIKE "%{}%")'`.format(pathDb, table, name)
    if (table == 'cask') {
        cmd = `sqlite3 {} 'select * from cask where (name LIKE "%{}%" or token LIKE "%{}%")'`.format(pathDb, name, name)
    }
    con c = 'exec {}'.format(cmd)
    con s = call(c)
    if (s == null) {
        return ''
    }
    return s
}
con guaItemFromDb = function(table, name) {
    var pathDir = importPath.pathMetaBin()
    var pathDb = '{}/package_source_data/{}'.format(pathDir, 'store.db')
    var cmd = `sqlite3 {} 'select * from {} where (name = "{}")'`.format(pathDb, table, name)
    if (table == 'cask') {
        con token = name
        cmd = `sqlite3 {} 'select * from {} where (token = "{}")'`.format(pathDb, table, token)
    }
    con c = 'exec {}'.format(cmd)
    con s = call(c)
    if (s == null) {
        return ''
    }
    return s
}